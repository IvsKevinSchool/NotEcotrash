# Generated by Django 5.2.1 on 2025-08-09 00:18

from django.db import migrations
from django.utils import timezone


def populate_default_status(apps, schema_editor):
    """
    Pobla la tabla Status con los valores por defecto
    """
    Status = apps.get_model('services', 'Status')
    
    # Lista de status por defecto
    default_statuses = [
        {
            "name": "Pendiente",
            "description": "El proceso a√∫n no ha comenzado",
            "is_active": True
        },
        {
            "name": "En curso",
            "description": "El proceso est√° actualmente en desarrollo",
            "is_active": True
        },
        {
            "name": "Aprobado",
            "description": "El proceso ha sido aprobado exitosamente",
            "is_active": True
        },
        {
            "name": "Cancelado",
            "description": "El proceso fue cancelado antes de completarse",
            "is_active": True
        },
        {
            "name": "Completado",
            "description": "El proceso se complet√≥ satisfactoriamente",
            "is_active": True
        }
    ]
    
    # Crear los registros solo si no existen (verificar por nombre)
    for status_data in default_statuses:
        # Verificar si ya existe un status con ese nombre
        if not Status.objects.filter(name=status_data["name"]).exists():
            status_obj = Status.objects.create(
                name=status_data["name"],
                description=status_data["description"],
                is_active=status_data["is_active"]
            )
            print(f"‚úÖ Status creado: {status_obj.name}")
        else:
            print(f"‚ÑπÔ∏è  Status ya existe: {status_data['name']}")
    
    # Actualizar el status "Completado" si ya existe con otro nombre similar
    existing_completado = Status.objects.filter(name="Completado").first()
    if existing_completado:
        print(f"‚ÑπÔ∏è  Status 'Completado' ya existe con ID: {existing_completado.pk_status}")
    else:
        # Verificar si existe uno similar que podamos actualizar
        similar_status = Status.objects.filter(name__icontains="Completado").first()
        if similar_status:
            print(f"‚ÑπÔ∏è  Status similar encontrado: {similar_status.name} - manteni√©ndolo")
        else:
            print("‚ÑπÔ∏è  No se encontr√≥ status 'Completado' existente")


def reverse_populate_default_status(apps, schema_editor):
    """
    Funci√≥n para revertir la migraci√≥n (eliminar solo los status que agregamos)
    """
    Status = apps.get_model('services', 'Status')
    
    # Solo eliminar los status que agregamos en esta migraci√≥n
    default_status_names = [
        "Pendiente",
        "En curso", 
        "Aprobado",
        "Cancelado"
        # No incluimos "Completado" porque puede ser que ya existiera
    ]
    
    # Eliminar solo los status que agregamos y que no est√©n siendo utilizados
    for name in default_status_names:
        try:
            status = Status.objects.get(name=name)
            # Verificar si el status est√° siendo usado (agregar check aqu√≠ si necesario)
            status.delete()
            print(f"üóëÔ∏è  Status eliminado: {name}")
        except Status.DoesNotExist:
            print(f"‚ö†Ô∏è  Status no encontrado: {name}")
        except Exception as e:
            print(f"‚ö†Ô∏è  No se pudo eliminar {name}: {str(e)}")


class Migration(migrations.Migration):

    dependencies = [
        ('services', '0013_alter_services_fk_management_alter_services_fk_waste_and_more'),
    ]

    operations = [
        migrations.RunPython(
            populate_default_status,
            reverse_populate_default_status,
            elidable=True,
        ),
    ]
